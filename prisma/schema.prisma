generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ticket {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  status      String @default("open")
  priority    String @default("medium")
  assignedTo  Int?
  assignee    User?  @relation("ExpertTickets", fields: [assignedTo], references: [id])

  escalated   Boolean   @default(false)
  escalatedAt DateTime?
  escalatedBy Int?
  escalator   User?     @relation("TicketEscalator", fields: [escalatedBy], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  createdBy        Int
  creator          User      @relation("UserCreatedTickets", fields: [createdBy], references: [id])
  slaDueAt         DateTime?
  escalationReason String?
  Rca              Rca?

  @@map("tickets")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      String
  createdAt DateTime @default(now())

  clientId Int?
  client   User?  @relation("ClientSubusers", fields: [clientId], references: [id])
  subusers User[] @relation("ClientSubusers")

  ticketsCreated   Ticket[] @relation("UserCreatedTickets")
  assignedTickets  Ticket[] @relation("ExpertTickets")
  escalatedTickets Ticket[] @relation("TicketEscalator")
  expertise        String? // e.g. "finance", "network"
  isAvailable      Boolean  @default(true)
  Rca              Rca[]
  isApproved Boolean @default(false)
}

model Rca {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  submittedBy     Int
  submittedByUser User @relation(fields: [submittedBy], references: [id])

  ticketId Int    @unique
  ticket   Ticket @relation(fields: [ticketId], references: [id])
}
